- explain how was the process to create a VPC peering
I teamed up with Christina to be able to finish this exercise. She configured and sent to me a VPC peering invitation that and then I accepted.

- add routes from origin VPC to target VPC - only for private subnets
I added a new record at my route table `devopsacademy-rt-public` with Christina EC2 instance IP `192.168.0.0/16` and the target was our vpc peering `pcx-06fe6ee73bb4bdca1`. She did the same at her end to be able to connect with my VPC.

- open any network ACL to allow the connection within the subnets -- try to only open the mininum required
Christina did this configuration at her end allowing my private IP `10.0.1.251` to access her VPC.

- from an instance in one vpc, SSH to the other instance (will have to share the ssh keys, create a new one just for this exercise -- pay attention to security)
We have share our ssh keys using the command `cat .ssh/authorized_keys`.
To add ssh keys to my machine I used the command `echo public_key_string >> ~/.ssh/authorized_keys`
n the above command, substitute the public_key_string with the output from the `cat .ssh/authorized_keys`

After given access to inbound traffic in security group we were able to connect in each other EC2 instance using ssh. See log from my EC2 below:

ec2-user@ip-10-0-1-251 ~]$ echo ssh-rsa ##public_key_string## >> ~/.ssh/authorized_keys
[ec2-user@ip-10-0-1-251 ~]$ chmod -R go= ~/.ssh
[ec2-user@ip-10-0-1-251 ~]$ ssh ec2-user@192.168.0.248 
The authenticity of host '192.168.0.248 (192.168.0.248)' can't be established.
ECDSA key fingerprint is SHA256:sY4ZlQo25HsafZpBgbiiHdxHwoRBqjaFp9beFs50zH8.
ECDSA key fingerprint is MD5:76:72:8b:71:fd:d7:da:3a:64:06:0c:ff:cf:de:b9:dd.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.0.248' (ECDSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
[ec2-user@ip-10-0-1-251 ~]$
