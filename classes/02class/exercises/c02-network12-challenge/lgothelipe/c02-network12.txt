Deliverables
explain how was the process to create a VPC peering
add routes from origin VPC to target VPC - only for private subnets
open any network ACL to allow the connection within the subnets -- try to only open the mininum required
from an instance in one vpc, SSH to the other instance (will have to share the ssh keys, create a new one just for this exercise -- pay attention to security)
open any security group to allow the SSH within the instances
explain any learnings from this process



I've tested the VPC peering between two accounts on AWS

1. First I've created a peering request login into the 1st account under VPC -> Perring Connections. 
Below are some details about the Peering Connection Request:

Requester VPC Region ap-southeast-2
Requester VPC CIDRs 172.16.0.0/16

Accepter VPC Region us-west-1
Accepter VPC CIDRs - (*it will be 172.31.0.0/16)

2. Connected to my second account on AWS and accepted the request (Under VPC -> Peering Connections)

Your VPC Peering Connection has been established.
To send and receive traffic across this VPC peering connection, you must add a route to the peered VPC in one or more of your VPC route tables.

3. Added the following rules to the route table of the accounts:

172.31.0.0/16 account - Route table 

Destination 172.16.10.0/24 | Target pcx-04220ebdec8abbbd5 (Peering Connection)

172.16.0.0/16 account - Route table

Destination 172.31.0.0/20 | Target pcx-04220ebdec8abbbd5 (Peering Connection)

4. Checked security groups and network ACLs making sure that SSH is allowed from the origin subnet to the destination subnet.

Network ACLs was set up as default (allow any from any to any)
Added rule to the security group on destination EC2 (172.31.11.138) to allow ssh:

Inbound rule | SSH | TCP | 22 | Source Custom 172.16.10.0/24


5. Tested SSH connection from 172.16.10.61 to peering VPC EC2 (172.31.11.138):

[ec2-user@ip-172-16-10-61 ~]$ vim test.pem
[ec2-user@ip-172-16-10-61 ~]$ chmod 400 test.pem
[ec2-user@ip-172-16-10-61 ~]$ ssh -i test.pem centos@172.31.11.138
The authenticity of host '172.31.11.138 (172.31.11.138)' can't be established.
ECDSA key fingerprint is SHA256:mEQFZ0Vbt5nMBCaFubW/9xmcqlAg4+rz3gdIx+iL9oc.
ECDSA key fingerprint is MD5:7c:eb:19:49:0e:5e:29:72:0b:ac:09:9a:7b:af:99:93.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.31.11.138' (ECDSA) to the list of known hosts.

[centos@ip-172-31-11-138 ~]$

6. Edit the file /var/www/html/index.html and added "test peering connection"
Accessed public IP on the destination EC2 and confirmed message (Destination EC2 was already with Apache installed and working)

[centos@ip-172-31-11-138 html]$ cd /var/www/html
[centos@ip-172-31-11-138 html]$ sudo vim index.html


http://13.56.242.238/ = test peering connection

Summary:

 - To create a VPC Peering Connection the accepter cannot have a CIDR block that overlaps the requester
 - The owner of the accepter VPC accepts the VPC peering connection request to activate the VPC peering connection
 - To enable the flow of traffic between the VPCs the route table must be edit on each side
 - Security group associated to the instaces can restrict the trafic
 - VPC peering does not support transitive peering relationships. In a VPC peering connection, your VPC does not have access to any other VPCs with which the peer VPC may be peered.
