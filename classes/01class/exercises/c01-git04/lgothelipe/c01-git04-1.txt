Lucas Q@DESKTOP-0ORGFEK MINGW64 /c/Temp/Test01 (master)                                                                 
$ touch my_env.txt   

SERVICE_NAME=account-management
ENVIRONMENT=prod
PASSWORD=pass1234

Lucas Q@DESKTOP-0ORGFEK MINGW64 /c/Temp/Test01 (master)
$ git add  my_env.txt

Lucas Q@DESKTOP-0ORGFEK MINGW64 /c/Temp/Test01 (master)
$ git commit -m "Add file my_env.txt"                                                                                  
[master 8b3a5f4] Add file my_env.txt
 1 file changed, 3 insertions(+)
 create mode 100644 my_env.txt
                                                                                                                        
Lucas Q@DESKTOP-0ORGFEK MINGW64 /c/Temp/Test01 (master)                                                                 
$ git log
                                                                                                             
commit 8b3a5f43d02883fc40a462dd0af246608e9be4c6 (HEAD -> master)                                                        
Author: lgothelipe <57392406+lgothelipe@users.noreply.github.com>                                                       
Date:   Wed Feb 12 19:49:41 2020 +1100                                                                                                                                                                                                              
Add file my_env.txt                                                                                                                                                                                                                         

commit 2fac7c2bde622739982dc031bee3d0dcf45accf1                                                                         
Author: lgothelipe <57392406+lgothelipe@users.noreply.github.com>                                                       
Date:   Wed Feb 12 19:18:53 2020 +1100
Revert "Add big file"
This reverts commit d90db2e81a2e339dff0baf6d080e1db1377287bd.

commit d90db2e81a2e339dff0baf6d080e1db1377287bd
Author: lgothelipe <57392406+lgothelipe@users.noreply.github.com>
Date:   Wed Feb 12 19:18:19 2020 +1100
Add big file

Lucas Q@DESKTOP-0ORGFEK MINGW64 /c/Temp/Test01 (master)
$                                                      

Questions

1.Let's suppose you remotely pushed your my_env.txt file. A colleague asks you to remove this information from Git. What's your colleague worried about?

	The file contains sensitive information that can be used by others without consent .

2.If you modify the file in your workspace, then push it, will it be enough? (It's not). Why?

	No, the file can be restored as it is registered on Git history

3.If you delete the file and push it, then create a new one with the rest of the information, is it enough? (It's not). Why?

	No, the file will still be on Git history, it will only add a new commit to the repository.

4.How to fix this? How do you remove something from Git history?

To fix you can use "git filter-branch" or "git rebase -i"  command to remove the file/commit from the history.

5.Which commands would you use? What are the consequences for other developers?

To change a few commits on a simple structure you can use "git rebase -i" and indicate how far back you want to rewrite commits.

#Edit the last four commits:

	git rebase -i HEAD~4
	

 If you need to rewrite a larger number of commits in some scriptable way use "git filter-branch" command:

 a.Ensure that you donâ€™t have any PR open, and run the command:

	git filter-branch --force --index-filter \  "git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA" \ --prune-empty --tag-name-filter cat -- --all

b.Add your file with sensitive data to .gitignore to ensure that you don't accidentally commit it again:

	echo "YOUR-FILE-WITH-SENSITIVE-DATA" >> .gitignore
	git add .gitignore
	git commit -m "Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore"
	
c.Double-check that you've removed everything you wanted to from your repository's history, and that all of your branches are checked out.
d.Once you're happy with the state of your repository, force-push your local changes to overwrite your GitHub repository, as well as all the branches you've pushed up:

	git push origin --force --all
	
e.In order to remove the sensitive file from your tagged releases, you'll also need to force-push against your Git tags:

	git push origin --force --tags
	
f.Tell your collaborators to rebase, not merge, any branches they created off of your old (tainted) repository history.
g.After some time has passed and you're confident that git filter-branch had no unintended side effects, you can force all objects in your local repository to be dereferenced and garbage collected with the following commands:

	git for-each-ref --format="delete %(refname)" refs/original | git update-ref --stdin
	git reflog expire --expire=now --all
	git gc --prune=now
