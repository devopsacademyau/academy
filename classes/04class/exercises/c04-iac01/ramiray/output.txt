 terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.myec2_instance_profile will be created
  + resource "aws_iam_instance_profile" "myec2_instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "my_ec2_instance_profile"
      + path        = "/"
      + role        = "myec2_role"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.mys3_bucket_policy will be created
  + resource "aws_iam_policy" "mys3_bucket_policy" {
      + arn    = (known after apply)
      + id     = (known after apply)
      + name   = "mys3_bucket_policy"
      + path   = "/"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:Get*",
                          + "s3:List*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy_attachment.iampolicy-attach will be created
  + resource "aws_iam_policy_attachment" "iampolicy-attach" {
      + id         = (known after apply)
      + name       = "iampolicy-attach"
      + policy_arn = (known after apply)
      + roles      = [
          + "myec2_role",
        ]
    }

  # aws_iam_role.myec2_role will be created
  + resource "aws_iam_role" "myec2_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "myec2_role"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.s3readonly_Policy_Attach_role will be created
  + resource "aws_iam_role_policy_attachment" "s3readonly_Policy_Attach_role" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "myec2_role"
    }

  # aws_instance.role-test will be created
  + resource "aws_instance" "role-test" {
      + ami                          = "ami-0a58e22c727337c51"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "my_ec2_instance_profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "Devopsacademy"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "dalinuxserver"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_s3_bucket.myexercisebucket will be created
  + resource "aws_s3_bucket" "myexercisebucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "damyexercisebucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "damyexercisebucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.da_exercise_sg will be created
  + resource "aws_security_group" "da_exercise_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "da_exercise_sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "da_exercise_sg"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

PS C:\Users\rramy\Desktop\Devopsacademy\academy\classes\04class\exercises\c04-iac01\ramiray> terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.myec2_instance_profile will be created
  + resource "aws_iam_instance_profile" "myec2_instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "my_ec2_instance_profile"
      + path        = "/"
      + role        = "myec2_role"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.mys3_bucket_policy will be created
  + resource "aws_iam_policy" "mys3_bucket_policy" {
      + arn    = (known after apply)
      + id     = (known after apply)
      + name   = "mys3_bucket_policy"
      + path   = "/"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:Get*",
                          + "s3:List*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy_attachment.iampolicy-attach will be created
  + resource "aws_iam_policy_attachment" "iampolicy-attach" {
      + id         = (known after apply)
      + name       = "iampolicy-attach"
      + policy_arn = (known after apply)
      + roles      = [
          + "myec2_role",
        ]
    }

  # aws_iam_role.myec2_role will be created
  + resource "aws_iam_role" "myec2_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "myec2_role"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.s3readonly_Policy_Attach_role will be created
  + resource "aws_iam_role_policy_attachment" "s3readonly_Policy_Attach_role" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "myec2_role"
    }

  # aws_instance.role-test will be created
  + resource "aws_instance" "role-test" {
      + ami                          = "ami-0a58e22c727337c51"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "my_ec2_instance_profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "Devopsacademy"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "dalinuxserver"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_s3_bucket.myexercisebucket will be created
  + resource "aws_s3_bucket" "myexercisebucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "damyexercisebucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "damyexercisebucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.da_exercise_sg will be created
  + resource "aws_security_group" "da_exercise_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "da_exercise_sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "da_exercise_sg"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_policy.mys3_bucket_policy: Creating...
aws_iam_role.myec2_role: Creating...
aws_security_group.da_exercise_sg: Creating...
aws_s3_bucket.myexercisebucket: Creating...
aws_security_group.da_exercise_sg: Creation complete after 3s [id=sg-00976a1c276c5e78d]
aws_iam_role.myec2_role: Creation complete after 3s [id=myec2_role]
aws_iam_instance_profile.myec2_instance_profile: Creating...
aws_iam_policy.mys3_bucket_policy: Creation complete after 4s [id=arn:aws:iam::348662207501:policy/mys3_bucket_policy]
aws_iam_role_policy_attachment.s3readonly_Policy_Attach_role: Creating...
aws_iam_policy_attachment.iampolicy-attach: Creating...
aws_s3_bucket.myexercisebucket: Creation complete after 4s [id=damyexercisebucket]
aws_iam_instance_profile.myec2_instance_profile: Creation complete after 3s [id=my_ec2_instance_profile]
aws_instance.role-test: Creating...
aws_iam_role_policy_attachment.s3readonly_Policy_Attach_role: Creation complete after 2s [id=myec2_role-20200726120435290100000001]
aws_iam_policy_attachment.iampolicy-attach: Creation complete after 3s [id=iampolicy-attach]
aws_instance.role-test: Still creating... [10s elapsed]
aws_instance.role-test: Still creating... [20s elapsed]
aws_instance.role-test: Still creating... [30s elapsed]
aws_instance.role-test: Creation complete after 31s [id=i-08ed0af5fadd472f2]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: ./terraform.tfstate



******************************************************************************

C:\Users\rramy\Downloads>ssh -i "***.pem" ec2-user@ec2-13-239-3-177.ap-southeast-2.compute.amazonaws.com
The authenticity of host 'ec2-13-239-3-177.ap-southeast-2.compute.amazonaws.com (13.239.3.177)' can't be established.
ECDSA key fingerprint is SHA256:ASxsYEIhB+vVsYq852ot3JcogZPYbiy0xPOUi7tHYtw.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'ec2-13-239-3-177.ap-southeast-2.compute.amazonaws.com,13.239.3.177' (ECDSA) to the list of known hosts.

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
[ec2-user@ip-172-31-0-162 ~]$ aws s3 ls
2020-06-11 01:48:27 aaryanbkt
2020-06-15 11:49:01 cf-templates-12n15dvjhxpj4-ap-southeast-2
2020-06-15 12:18:35 cf-templates-12n15dvjhxpj4-us-east-1
2020-06-21 05:48:10 continochallengetask2
2020-07-26 11:12:52 damyexercisebucket
2020-06-22 08:57:25 ramyadevopstest
