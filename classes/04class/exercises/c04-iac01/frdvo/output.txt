terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.ec2-read-s3-role-tf-profile will be created
  + resource "aws_iam_instance_profile" "ec2-read-s3-role-tf-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "ec2-read-s3-role-tf-profile"
      + path        = "/"
      + role        = "ec2-read-s3-role-tf"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_role.ec2-read-s3-role-tf will be created
  + resource "aws_iam_role" "ec2-read-s3-role-tf" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ec2-read-s3-role-tf"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy.s3-ReadOnly-Policy-tf will be created
  + resource "aws_iam_role_policy" "s3-ReadOnly-Policy-tf" {
      + id     = (known after apply)
      + name   = "s3-ReadOnly-Policy-tf"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:Get*",
                          + "s3:List*",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::devops-academy-terraform-bucket",
                          + "arn:aws:s3:::devops-academy-terraform-bucket/*",
                        ]
                      + Sid      = "AllowReadDevopsS3Buckets"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # aws_instance.da_academy will be created
  + resource "aws_instance" "da_academy" {
      + ami                          = "ami-088ff0e3bde7b3fdf"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = "ap-southeast-2a"
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "ec2-read-s3-role-tf-profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "da"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-04843486979b4aeb2"
      + tags                         = {
          + "Name" = "DevOps_Academy_Terraform_1st_EC2"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_s3_bucket.first_s3 will be created
  + resource "aws_s3_bucket" "first_s3" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "devops-academy-terraform-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "DevOps Academy Terraform Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.da-allow_ssh-tf will be created
  + resource "aws_security_group" "da-allow_ssh-tf" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "122.199.35.116/32",
                ]
              + description      = "SSH from Home"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "da-allow_ssh-tf"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_ssh"
        }
      + vpc_id                 = "vpc-0a2b7db4956438d22"
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_role.ec2-read-s3-role-tf: Creating...
aws_security_group.da-allow_ssh-tf: Creating...
aws_s3_bucket.first_s3: Creating...
aws_iam_role.ec2-read-s3-role-tf: Creation complete after 2s [id=ec2-read-s3-role-tf]
aws_iam_role_policy.s3-ReadOnly-Policy-tf: Creating...
aws_iam_instance_profile.ec2-read-s3-role-tf-profile: Creating...
aws_security_group.da-allow_ssh-tf: Creation complete after 2s [id=sg-0d1740c973dd227c1]
aws_instance.da_academy: Creating...
aws_iam_role_policy.s3-ReadOnly-Policy-tf: Creation complete after 2s [id=ec2-read-s3-role-tf:s3-ReadOnly-Policy-tf]
aws_s3_bucket.first_s3: Creation complete after 4s [id=devops-academy-terraform-bucket]
aws_iam_instance_profile.ec2-read-s3-role-tf-profile: Creation complete after 4s [id=ec2-read-s3-role-tf-profile]
aws_instance.da_academy: Still creating... [10s elapsed]
aws_instance.da_academy: Still creating... [20s elapsed]
aws_instance.da_academy: Still creating... [30s elapsed]
aws_instance.da_academy: Creation complete after 40s [id=i-0fb9707231613dd5a]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: .terraform/terraform.tfstate

$aws s3 ls  s3://devops-academy-terraform-bucket
$aws s3 cp /home/fer/repos/academy/classes/04class/exercises/c04-iac01/frdvo/output.txt s3://devops-academy-terraform-bucket/
upload: ./output.txt to s3://devops-academy-terraform-bucket/output.txt

$ ssh -i ~/.ssh/da.pem ec2-user@13.236.152.75
load pubkey "/home/fer/.ssh/da.pem": invalid format
The authenticity of host '13.236.152.75 (13.236.152.75)' can't be established.
ECDSA key fingerprint is SHA256:h39yR5QXYRX0jryiuB7i2pSCekUpqHMFrOtJFwULWsk.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '13.236.152.75' (ECDSA) to the list of known hosts.

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
17 package(s) needed for security, out of 38 available
Run "sudo yum update" to apply all updates.
[ec2-user@ip-172-16-110-112 ~]$ aws s3 ls

An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied
[ec2-user@ip-172-16-110-112 ~]$ aws s3 ls s3://devops-academy-terraform-bucket
2020-07-25 06:05:13      10247 output.txt
[ec2-user@ip-172-16-110-112 ~]$


