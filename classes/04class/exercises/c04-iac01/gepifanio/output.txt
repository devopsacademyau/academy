terraform plan -var-file=./dev.tfvars -out test.txt

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.iam-profile will be created
  + resource "aws_iam_instance_profile" "iam-profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "iam-profile"
      + path        = "/"
      + role        = "s3-full-access-role"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy.policy will be created
  + resource "aws_iam_policy" "policy" {
      + arn    = (known after apply)
      + id     = (known after apply)
      + name   = "s3_full_access_policy"
      + path   = "/"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # aws_iam_policy_attachment.s3_full_access will be created
  + resource "aws_iam_policy_attachment" "s3_full_access" {
      + id         = (known after apply)
      + name       = "ec2-s3-full_access-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "s3-full-access-role",
        ]
    }

  # aws_iam_role.s3-full-access-role will be created
  + resource "aws_iam_role" "s3-full-access-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "EC2InstancesS3FullAccess"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "s3-full-access-role"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_instance.ec2-instance will be created
  + resource "aws_instance" "ec2-instance" {
      + ami                          = "ami-0e4bc04bd401729d6"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = "ap-southeast-2a"
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = "iam-profile"
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "MyDevopsAcademyKey"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "IaC-Ec2"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_network_interface_sg_attachment.sg_attachment will be created
  + resource "aws_network_interface_sg_attachment" "sg_attachment" {
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + security_group_id    = (known after apply)
    }

  # aws_s3_bucket.s3-bucket will be created
  + resource "aws_s3_bucket" "s3-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "ec2-s3-bucket-test"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = "ap-southeast-2"
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "Dev"
          + "Name"        = "Testing ec2 with s3 bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # aws_security_group.sg-allow-ssh will be created
  + resource "aws_security_group" "sg-allow-ssh" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH from VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "allow_ssh"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "sg_allow_ssh"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: test.txt

To perform exactly these actions, run the following command to apply:
    terraform apply "test.txt"

➜  gepifanio git:(master) ✗ terraform apply test.txt
aws_iam_policy.policy: Creating...
aws_iam_role.s3-full-access-role: Creating...
aws_security_group.sg-allow-ssh: Creating...
aws_s3_bucket.s3-bucket: Creating...
aws_iam_role.s3-full-access-role: Creation complete after 2s [id=s3-full-access-role]
aws_iam_instance_profile.iam-profile: Creating...
aws_security_group.sg-allow-ssh: Creation complete after 2s [id=sg-07757f640f04c7cce]
aws_iam_policy.policy: Creation complete after 3s [id=arn:aws:iam::873547843801:policy/s3_full_access_policy]
aws_iam_policy_attachment.s3_full_access: Creating...
aws_s3_bucket.s3-bucket: Creation complete after 5s [id=ec2-s3-bucket-test]
aws_iam_instance_profile.iam-profile: Creation complete after 4s [id=iam-profile]
aws_instance.ec2-instance: Creating...
aws_iam_policy_attachment.s3_full_access: Creation complete after 4s [id=ec2-s3-full_access-policy-attachment]
aws_instance.ec2-instance: Still creating... [10s elapsed]
aws_instance.ec2-instance: Still creating... [20s elapsed]
aws_instance.ec2-instance: Still creating... [30s elapsed]
aws_instance.ec2-instance: Creation complete after 32s [id=i-0f564685191ef09b8]
aws_network_interface_sg_attachment.sg_attachment: Creating...
aws_network_interface_sg_attachment.sg_attachment: Creation complete after 1s [id=sg-07757f640f04c7cce_eni-0dc14544bd5495cb6]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: ./terraform.tfstate
