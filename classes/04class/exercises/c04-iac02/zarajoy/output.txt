z@bacon:~/Documents/GitHub/academy/classes/04class/exercises/c04-iac02/zarajoy$ terraform apply -var-file="main.tfvars" 
data.aws_availability_zones.available: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.NAT-EIP will be created
  + resource "aws_eip" "NAT-EIP" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # aws_internet_gateway.IGW will be created
  + resource "aws_internet_gateway" "IGW" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "c04-iac02-IGW"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.NAT-GW will be created
  + resource "aws_nat_gateway" "NAT-GW" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "c04-iac02-NAT-GW"
        }
    }

  # aws_route_table.route-table-PRI will be created
  + resource "aws_route_table" "route-table-PRI" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "c04-iac02-route-table-PRI"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.route-table-PUB will be created
  + resource "aws_route_table" "route-table-PUB" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "c04-iac02-route-table-PUB"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.private-1 will be created
  + resource "aws_route_table_association" "private-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.private-2 will be created
  + resource "aws_route_table_association" "private-2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public-1 will be created
  + resource "aws_route_table_association" "public-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public-2 will be created
  + resource "aws_route_table_association" "public-2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_subnet.subnet-private-1 will be created
  + resource "aws_subnet" "subnet-private-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "c04-iac02-Public-subnet-02"
          + "Tier" = "private"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.subnet-private-2 will be created
  + resource "aws_subnet" "subnet-private-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.3.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "c04-iac02-Private-subnet-02"
          + "Tier" = "private"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.subnet-public-1 will be created
  + resource "aws_subnet" "subnet-public-1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.0.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "c04-iac02-Public-subnet-01"
          + "Tier" = "public"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.subnet-public-2 will be created
  + resource "aws_subnet" "subnet-public-2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.2.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "c04-iac02-Private-subnet-01"
          + "Tier" = "public"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "192.168.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "c04-iac02-vpc"
        }
    }

Plan: 14 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_eip.NAT-EIP: Creating...
aws_vpc.vpc: Creating...
aws_eip.NAT-EIP: Creation complete after 1s [id=eipalloc-0731bb2a83302fced]
aws_vpc.vpc: Creation complete after 3s [id=vpc-040de482c5afe4e94]
aws_internet_gateway.IGW: Creating...
aws_subnet.subnet-public-1: Creating...
aws_subnet.subnet-private-2: Creating...
aws_subnet.subnet-public-2: Creating...
aws_subnet.subnet-private-1: Creating...
aws_subnet.subnet-private-1: Creation complete after 1s [id=subnet-001bdeaae6f469116]
aws_subnet.subnet-private-2: Creation complete after 1s [id=subnet-0f6414cfe077bfd2b]
aws_internet_gateway.IGW: Creation complete after 1s [id=igw-0f2682d430d3271e3]
aws_route_table.route-table-PUB: Creating...
aws_subnet.subnet-public-2: Creation complete after 1s [id=subnet-0673fb031aa758f17]
aws_subnet.subnet-public-1: Creation complete after 1s [id=subnet-0af31f12a84d04f27]
aws_nat_gateway.NAT-GW: Creating...
aws_route_table.route-table-PUB: Creation complete after 1s [id=rtb-0e6043f32fd92c6ff]
aws_route_table_association.public-2: Creating...
aws_route_table_association.public-1: Creating...
aws_route_table_association.public-1: Creation complete after 1s [id=rtbassoc-0933557535b652e6f]
aws_route_table_association.public-2: Creation complete after 1s [id=rtbassoc-01684e7eb80073da1]
aws_nat_gateway.NAT-GW: Still creating... [10s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [20s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [30s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [40s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [50s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [1m0s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [1m10s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [1m20s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [1m30s elapsed]
aws_nat_gateway.NAT-GW: Still creating... [1m40s elapsed]
aws_nat_gateway.NAT-GW: Creation complete after 1m47s [id=nat-099c58a3d09841692]
aws_route_table.route-table-PRI: Creating...
aws_route_table.route-table-PRI: Creation complete after 1s [id=rtb-0b0bd4308fa5e0c14]
aws_route_table_association.private-1: Creating...
aws_route_table_association.private-2: Creating...
aws_route_table_association.private-1: Creation complete after 1s [id=rtbassoc-0171c1c705c1894e3]
aws_route_table_association.private-2: Creation complete after 1s [id=rtbassoc-0171c1c705c1894e3]

Apply complete! Resources: 14 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: ./terraform.tfstate

Outputs:

subnet-private-1 = [
  "192.168.1.0/24",
]
subnet-private-2 = [
  "192.168.3.0/24",
]
subnet-public-1 = [
  "192.168.0.0/24",
]
subnet-public-2 = [
  "192.168.2.0/24",
]
vpc = 192.168.0.0/16

