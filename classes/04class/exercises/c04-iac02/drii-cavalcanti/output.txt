$ terraform plan -var-file main.tfvars | grep created 
  # aws_eip.devopsacademy-eip-iac will be created
  # aws_internet_gateway.devopsacademy-igw-iac will be created
  # aws_nat_gateway.devopsacademy-nat-iac will be created
  # aws_route_table.devopsacademy-private-rt-iac will be created
  # aws_route_table.devopsacademy-public-rt-iac will be created
  # aws_route_table_association.private-rt-iac[0] will be created
  # aws_route_table_association.private-rt-iac[1] will be created
  # aws_route_table_association.private-rt-iac[2] will be created
  # aws_route_table_association.public-rt-iac[0] will be created
  # aws_route_table_association.public-rt-iac[1] will be created
  # aws_route_table_association.public-rt-iac[2] will be created
  # aws_security_group.devopsacademy_private_sg_iac will be created
  # aws_security_group.devopsacademy_public_sg_iac will be created
  # aws_subnet.private-subnet-iac[0] will be created
  # aws_subnet.private-subnet-iac[1] will be created
  # aws_subnet.private-subnet-iac[2] will be created
  # aws_subnet.public-subnet-iac[0] will be created
  # aws_subnet.public-subnet-iac[1] will be created
  # aws_subnet.public-subnet-iac[2] will be created
  # aws_vpc.devopsacademy-vpc-iac will be created

$ terraform plan -var-file main.tfvars               
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.aws_availability_zones.available: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.devopsacademy-eip-iac will be created
  + resource "aws_eip" "devopsacademy-eip-iac" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # aws_internet_gateway.devopsacademy-igw-iac will be created
  + resource "aws_internet_gateway" "devopsacademy-igw-iac" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "vpc igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.devopsacademy-nat-iac will be created
  + resource "aws_nat_gateway" "devopsacademy-nat-iac" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "NAT gateway devopsacademy"
        }
    }

  # aws_route_table.devopsacademy-private-rt-iac will be created
  + resource "aws_route_table" "devopsacademy-private-rt-iac" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "private subnets route table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.devopsacademy-public-rt-iac will be created
  + resource "aws_route_table" "devopsacademy-public-rt-iac" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "public subnets route table"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.private-rt-iac[0] will be created
  + resource "aws_route_table_association" "private-rt-iac" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.private-rt-iac[1] will be created
  + resource "aws_route_table_association" "private-rt-iac" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.private-rt-iac[2] will be created
  + resource "aws_route_table_association" "private-rt-iac" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public-rt-iac[0] will be created
  + resource "aws_route_table_association" "public-rt-iac" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public-rt-iac[1] will be created
  + resource "aws_route_table_association" "public-rt-iac" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public-rt-iac[2] will be created
  + resource "aws_route_table_association" "public-rt-iac" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.devopsacademy_private_sg_iac will be created
  + resource "aws_security_group" "devopsacademy_private_sg_iac" {
      + arn                    = (known after apply)
      + description            = "SSH access only from public instances on AWS"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.0.10.0/24",
                  + "10.0.20.0/24",
                  + "10.0.30.0/24",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "private-security-group-iac"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.devopsacademy_public_sg_iac will be created
  + resource "aws_security_group" "devopsacademy_public_sg_iac" {
      + arn                    = (known after apply)
      + description            = "SSH access from home to AWS"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "public-security-group-iac"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.private-subnet-iac[0] will be created
  + resource "aws_subnet" "private-subnet-iac" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.11.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "private-ap-southeast-2a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.private-subnet-iac[1] will be created
  + resource "aws_subnet" "private-subnet-iac" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.21.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "private-ap-southeast-2b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.private-subnet-iac[2] will be created
  + resource "aws_subnet" "private-subnet-iac" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.31.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "private-ap-southeast-2c"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.public-subnet-iac[0] will be created
  + resource "aws_subnet" "public-subnet-iac" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.10.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "private-ap-southeast-2a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.public-subnet-iac[1] will be created
  + resource "aws_subnet" "public-subnet-iac" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.20.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "private-ap-southeast-2b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.public-subnet-iac[2] will be created
  + resource "aws_subnet" "public-subnet-iac" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.30.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "private-ap-southeast-2c"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.devopsacademy-vpc-iac will be created
  + resource "aws_vpc" "devopsacademy-vpc-iac" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "vpc iac"
        }
    }

Plan: 20 to add, 0 to change, 0 to destroy.

Warning: Interpolation-only expressions are deprecated

  on vpc.tf line 3, in resource "aws_vpc" "devopsacademy-vpc-iac":
   3:   cidr_block = "${var.vpc_cidr}"

Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

(and 23 more similar warnings elsewhere)


------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

