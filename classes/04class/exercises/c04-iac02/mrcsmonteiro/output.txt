➜  mrcsmonteiro git:(mrcsmonteiro/c04-iac02) ✗ terraform plan -var-file="main.tfvars"
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_default_security_group.default will be created
  + resource "aws_default_security_group" "default" {
      + arn                    = (known after apply)
      + description            = (known after apply)
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.20.0.0/16",
                ]
              + description      = "Allow SSH traffic from DevOps Academy VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "DevOps Academy Default SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_eip.devopsacademy_iac_eip will be created
  + resource "aws_eip" "devopsacademy_iac_eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # aws_instance.bastion will be created
  + resource "aws_instance" "bastion" {
      + ami                          = "ami-0a58e22c727337c51"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "DevOpsAcademy"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "DevOps Academy Public Instance"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.private will be created
  + resource "aws_instance" "private" {
      + ami                          = "ami-0a58e22c727337c51"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "DevOpsAcademy"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "DevOps Academy Private Instance"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.devopsacademy_iac_igw will be created
  + resource "aws_internet_gateway" "devopsacademy_iac_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "devopsacademy-iac-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.devopsacademy_iac_nat_gw will be created
  + resource "aws_nat_gateway" "devopsacademy_iac_nat_gw" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "devopsacademy-iac-nat-gw"
        }
    }

  # aws_route_table.devopsacademy_iac_private_rt will be created
  + resource "aws_route_table" "devopsacademy_iac_private_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "devopsacademy-iac-private-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.devopsacademy_iac_public_rt will be created
  + resource "aws_route_table" "devopsacademy_iac_public_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "devopsacademy-iac-public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-private-rt-assoc-1 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-private-rt-assoc-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-private-rt-assoc-2 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-private-rt-assoc-2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-public-rt-assoc-1 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-public-rt-assoc-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-public-rt-assoc-2 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-public-rt-assoc-2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.devops_academy_sg will be created
  + resource "aws_security_group" "devops_academy_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow ALL outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "220.253.7.163/32",
                ]
              + description      = "Allow SSH for Admin only"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "devops-academy-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "DevOps Academy SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.devops_academy_iac_private_subnet_1 will be created
  + resource "aws_subnet" "devops_academy_iac_private_subnet_1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.3.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-private-a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.devops_academy_iac_private_subnet_2 will be created
  + resource "aws_subnet" "devops_academy_iac_private_subnet_2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.4.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-private-b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.devops_academy_iac_public_subnet_1 will be created
  + resource "aws_subnet" "devops_academy_iac_public_subnet_1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-public-a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.devops_academy_iac_public_subnet_2 will be created
  + resource "aws_subnet" "devops_academy_iac_public_subnet_2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.2.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-public-b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.devops_academy_iac_vpc will be created
  + resource "aws_vpc" "devops_academy_iac_vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.20.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "devopsacademy-iac"
        }
    }

Plan: 18 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

➜  mrcsmonteiro git:(mrcsmonteiro/c04-iac02) ✗ terraform apply -var-file="main.tfvars"

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_default_security_group.default will be created
  + resource "aws_default_security_group" "default" {
      + arn                    = (known after apply)
      + description            = (known after apply)
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.20.0.0/16",
                ]
              + description      = "Allow SSH traffic from DevOps Academy VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "DevOps Academy Default SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_eip.devopsacademy_iac_eip will be created
  + resource "aws_eip" "devopsacademy_iac_eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # aws_instance.bastion will be created
  + resource "aws_instance" "bastion" {
      + ami                          = "ami-0a58e22c727337c51"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "DevOpsAcademy"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "DevOps Academy Public Instance"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.private will be created
  + resource "aws_instance" "private" {
      + ami                          = "ami-0a58e22c727337c51"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "DevOpsAcademy"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "DevOps Academy Private Instance"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.devopsacademy_iac_igw will be created
  + resource "aws_internet_gateway" "devopsacademy_iac_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "devopsacademy-iac-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.devopsacademy_iac_nat_gw will be created
  + resource "aws_nat_gateway" "devopsacademy_iac_nat_gw" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "devopsacademy-iac-nat-gw"
        }
    }

  # aws_route_table.devopsacademy_iac_private_rt will be created
  + resource "aws_route_table" "devopsacademy_iac_private_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "devopsacademy-iac-private-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.devopsacademy_iac_public_rt will be created
  + resource "aws_route_table" "devopsacademy_iac_public_rt" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "devopsacademy-iac-public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-private-rt-assoc-1 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-private-rt-assoc-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-private-rt-assoc-2 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-private-rt-assoc-2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-public-rt-assoc-1 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-public-rt-assoc-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.devopsacademy-iac-public-rt-assoc-2 will be created
  + resource "aws_route_table_association" "devopsacademy-iac-public-rt-assoc-2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.devops_academy_sg will be created
  + resource "aws_security_group" "devops_academy_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow ALL outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "220.253.7.163/32",
                ]
              + description      = "Allow SSH for Admin only"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "devops-academy-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "DevOps Academy SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.devops_academy_iac_private_subnet_1 will be created
  + resource "aws_subnet" "devops_academy_iac_private_subnet_1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.3.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-private-a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.devops_academy_iac_private_subnet_2 will be created
  + resource "aws_subnet" "devops_academy_iac_private_subnet_2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.4.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-private-b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.devops_academy_iac_public_subnet_1 will be created
  + resource "aws_subnet" "devops_academy_iac_public_subnet_1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-public-a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.devops_academy_iac_public_subnet_2 will be created
  + resource "aws_subnet" "devops_academy_iac_public_subnet_2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.20.2.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "devopsacademy-iac-public-b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.devops_academy_iac_vpc will be created
  + resource "aws_vpc" "devops_academy_iac_vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.20.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "devopsacademy-iac"
        }
    }

Plan: 18 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_eip.devopsacademy_iac_eip: Creating...
aws_vpc.devops_academy_iac_vpc: Creating...
aws_eip.devopsacademy_iac_eip: Creation complete after 1s [id=eipalloc-0f649f60f952f683d]
aws_vpc.devops_academy_iac_vpc: Creation complete after 3s [id=vpc-01770a00b012a0655]
aws_subnet.devops_academy_iac_private_subnet_2: Creating...
aws_internet_gateway.devopsacademy_iac_igw: Creating...
aws_subnet.devops_academy_iac_public_subnet_2: Creating...
aws_subnet.devops_academy_iac_private_subnet_1: Creating...
aws_subnet.devops_academy_iac_public_subnet_1: Creating...
aws_security_group.devops_academy_sg: Creating...
aws_default_security_group.default: Creating...
aws_subnet.devops_academy_iac_private_subnet_1: Creation complete after 1s [id=subnet-0776039d144ab1bfa]
aws_subnet.devops_academy_iac_private_subnet_2: Creation complete after 1s [id=subnet-03262b13bf890a258]
aws_instance.private: Creating...
aws_internet_gateway.devopsacademy_iac_igw: Creation complete after 1s [id=igw-046278af17074a327]
aws_route_table.devopsacademy_iac_public_rt: Creating...
aws_subnet.devops_academy_iac_public_subnet_1: Creation complete after 1s [id=subnet-04c62c0f23beaa25b]
aws_nat_gateway.devopsacademy_iac_nat_gw: Creating...
aws_subnet.devops_academy_iac_public_subnet_2: Creation complete after 1s [id=subnet-0943deb77b7e900c4]
aws_default_security_group.default: Creation complete after 2s [id=sg-00f0dd18db0c97f39]
aws_route_table.devopsacademy_iac_public_rt: Creation complete after 1s [id=rtb-017f514e0ca7fae48]
aws_route_table_association.devopsacademy-iac-public-rt-assoc-1: Creating...
aws_route_table_association.devopsacademy-iac-public-rt-assoc-2: Creating...
aws_security_group.devops_academy_sg: Creation complete after 2s [id=sg-012c0171072df764d]
aws_instance.bastion: Creating...
aws_route_table_association.devopsacademy-iac-public-rt-assoc-1: Creation complete after 0s [id=rtbassoc-063f44c396a0541b1]
aws_route_table_association.devopsacademy-iac-public-rt-assoc-2: Creation complete after 0s [id=rtbassoc-02fb8be9d32b35c0e]
aws_instance.private: Still creating... [10s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [10s elapsed]
aws_instance.bastion: Still creating... [10s elapsed]
aws_instance.private: Still creating... [20s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [20s elapsed]
aws_instance.bastion: Still creating... [20s elapsed]
aws_instance.private: Creation complete after 22s [id=i-0688eeeb3fdac2098]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [30s elapsed]
aws_instance.bastion: Still creating... [30s elapsed]
aws_instance.bastion: Creation complete after 34s [id=i-0f7afc599428a2097]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [40s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [50s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [1m0s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [1m10s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [1m20s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [1m30s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [1m40s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Still creating... [1m50s elapsed]
aws_nat_gateway.devopsacademy_iac_nat_gw: Creation complete after 1m57s [id=nat-0eec09c8de0ddf64a]
aws_route_table.devopsacademy_iac_private_rt: Creating...
aws_route_table.devopsacademy_iac_private_rt: Creation complete after 1s [id=rtb-0645f8db7bba86b04]
aws_route_table_association.devopsacademy-iac-private-rt-assoc-2: Creating...
aws_route_table_association.devopsacademy-iac-private-rt-assoc-1: Creating...
aws_route_table_association.devopsacademy-iac-private-rt-assoc-1: Creation complete after 1s [id=rtbassoc-0ba08627eecccc4b4]
aws_route_table_association.devopsacademy-iac-private-rt-assoc-2: Creation complete after 1s [id=rtbassoc-004fb6f90b950cb43]

Apply complete! Resources: 18 added, 0 changed, 0 destroyed.

Outputs:

bastion_host_public_ip = 13.210.195.66
private_host_ip = 10.20.3.76
private_subnet_a = 10.20.3.0/24
private_subnet_b = 10.20.4.0/24
public_subnet_a = 10.20.1.0/24
public_subnet_b = 10.20.2.0/24
vpc_cidr = 10.20.0.0/16

# Testing access to bastion host

$ ssh -A ec2-user@13.210.195.66

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
14 package(s) needed for security, out of 31 available
Run "sudo yum update" to apply all updates.

# Testing access to private instance

[ec2-user@ip-10-20-1-98 ~]$ ssh 10.20.3.76
The authenticity of host '10.20.3.76 (10.20.3.76)' can't be established.
ECDSA key fingerprint is SHA256:vJhvHhxvOLwC7sVAm/74tvyPwpx8Uv/wfWKk+hm+/V4.
ECDSA key fingerprint is MD5:41:85:0b:ac:75:3c:1d:0f:37:5f:94:e5:23:d4:f8:86.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '10.20.3.76' (ECDSA) to the list of known hosts.

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/