siyuanhu@SIYUANs-MBP  ~/Projects/academy/classes/04class/exercises/c04-iac04/hsy3418/terraform-code   hsy3418/c04-iac04  terraform apply  

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.iac04_module.aws_autoscaling_group.ad_asg will be created
  + resource "aws_autoscaling_group" "ad_asg" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + launch_configuration      = "as_config"
      + load_balancers            = (known after apply)
      + max_size                  = 2
      + metrics_granularity       = "1Minute"
      + min_size                  = 1
      + name                      = "ad_asg"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"
    }

  # module.iac04_module.aws_autoscaling_policy.web_policy_down will be created
  + resource "aws_autoscaling_policy" "web_policy_down" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "ad_asg"
      + cooldown                = 300
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "policy_down"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = 1
    }

  # module.iac04_module.aws_autoscaling_policy.web_policy_up will be created
  + resource "aws_autoscaling_policy" "web_policy_up" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "ad_asg"
      + cooldown                = 300
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "policy_up"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = 1
    }

  # module.iac04_module.aws_elb.web_elb will be created
  + resource "aws_elb" "web_elb" {
      + arn                         = (known after apply)
      + availability_zones          = (known after apply)
      + connection_draining         = false
      + connection_draining_timeout = 300
      + cross_zone_load_balancing   = true
      + dns_name                    = (known after apply)
      + id                          = (known after apply)
      + idle_timeout                = 60
      + instances                   = (known after apply)
      + internal                    = (known after apply)
      + name                        = "web-elb"
      + security_groups             = (known after apply)
      + source_security_group       = (known after apply)
      + source_security_group_id    = (known after apply)
      + subnets                     = (known after apply)
      + zone_id                     = (known after apply)

      + health_check {
          + healthy_threshold   = (known after apply)
          + interval            = (known after apply)
          + target              = (known after apply)
          + timeout             = (known after apply)
          + unhealthy_threshold = (known after apply)
        }

      + listener {
          + instance_port     = 80
          + instance_protocol = "http"
          + lb_port           = 80
          + lb_protocol       = "http"
        }
    }

  # module.iac04_module.aws_internet_gateway.my_vpc_igw will be created
  + resource "aws_internet_gateway" "my_vpc_igw" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "My VPC - Internet Gateway"
        }
      + vpc_id   = (known after apply)
    }

  # module.iac04_module.aws_launch_configuration.as_config will be created
  + resource "aws_launch_configuration" "as_config" {
      + arn                         = (known after apply)
      + associate_public_ip_address = true
      + ebs_optimized               = (known after apply)
      + enable_monitoring           = true
      + id                          = (known after apply)
      + image_id                    = "ami-0970010f37c4f9c8d"
      + instance_type               = "t2.micro"
      + key_name                    = (known after apply)
      + name                        = "as_config"
      + security_groups             = (known after apply)
      + user_data                   = "c2c8c957e7705850227911a144d9ddeddd08d382"

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.iac04_module.aws_route_table.my_vpc_public will be created
  + resource "aws_route_table" "my_vpc_public" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "Public Subnets Route Table for My VPC"
        }
      + vpc_id           = (known after apply)
    }

  # module.iac04_module.aws_route_table_association.my_vpc_a_public will be created
  + resource "aws_route_table_association" "my_vpc_a_public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.iac04_module.aws_route_table_association.my_vpc_b_public will be created
  + resource "aws_route_table_association" "my_vpc_b_public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.iac04_module.aws_security_group.allow_http will be created
  + resource "aws_security_group" "allow_http" {
      + arn                    = (known after apply)
      + description            = "Allow HTTP inbound connections"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "allow_http"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "Allow HTTP Security Group"
        }
      + vpc_id                 = (known after apply)
    }

  # module.iac04_module.aws_subnet.public-a-iac04 will be created
  + resource "aws_subnet" "public-a-iac04" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.0.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "public-a-iac04"
        }
      + vpc_id                          = (known after apply)
    }

  # module.iac04_module.aws_subnet.public-b-iac04 will be created
  + resource "aws_subnet" "public-b-iac04" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "public-b-iac04"
        }
      + vpc_id                          = (known after apply)
    }

  # module.iac04_module.aws_vpc.iac04-vpc will be created
  + resource "aws_vpc" "iac04-vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
    }

Plan: 13 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.iac04_module.aws_vpc.iac04-vpc: Creating...
module.iac04_module.aws_vpc.iac04-vpc: Creation complete after 3s [id=vpc-07328a4c6b543ce6d]
module.iac04_module.aws_internet_gateway.my_vpc_igw: Creating...
module.iac04_module.aws_subnet.public-b-iac04: Creating...
module.iac04_module.aws_subnet.public-a-iac04: Creating...
module.iac04_module.aws_security_group.allow_http: Creating...
module.iac04_module.aws_subnet.public-b-iac04: Creation complete after 2s [id=subnet-04a10714ec866e2d7]
module.iac04_module.aws_subnet.public-a-iac04: Creation complete after 2s [id=subnet-06e055370a92215e8]
module.iac04_module.aws_internet_gateway.my_vpc_igw: Creation complete after 2s [id=igw-0e1f22dbc08b9716b]
module.iac04_module.aws_route_table.my_vpc_public: Creating...
module.iac04_module.aws_security_group.allow_http: Creation complete after 4s [id=sg-0d558532339e092cb]
module.iac04_module.aws_launch_configuration.as_config: Creating...
module.iac04_module.aws_elb.web_elb: Creating...
module.iac04_module.aws_route_table.my_vpc_public: Creation complete after 2s [id=rtb-042cdb12a1442bf06]
module.iac04_module.aws_route_table_association.my_vpc_a_public: Creating...
module.iac04_module.aws_route_table_association.my_vpc_b_public: Creating...
module.iac04_module.aws_route_table_association.my_vpc_b_public: Creation complete after 0s [id=rtbassoc-00ed385ee4d1161eb]
module.iac04_module.aws_route_table_association.my_vpc_a_public: Creation complete after 0s [id=rtbassoc-0d0bed6f9e955e102]
module.iac04_module.aws_launch_configuration.as_config: Creation complete after 1s [id=as_config]
module.iac04_module.aws_elb.web_elb: Creation complete after 4s [id=web-elb]
module.iac04_module.aws_autoscaling_group.ad_asg: Creating...
module.iac04_module.aws_autoscaling_group.ad_asg: Still creating... [10s elapsed]
module.iac04_module.aws_autoscaling_group.ad_asg: Still creating... [20s elapsed]
module.iac04_module.aws_autoscaling_group.ad_asg: Still creating... [30s elapsed]
module.iac04_module.aws_autoscaling_group.ad_asg: Still creating... [40s elapsed]
module.iac04_module.aws_autoscaling_group.ad_asg: Creation complete after 40s [id=ad_asg]
module.iac04_module.aws_autoscaling_policy.web_policy_up: Creating...
module.iac04_module.aws_autoscaling_policy.web_policy_down: Creating...
module.iac04_module.aws_autoscaling_policy.web_policy_down: Creation complete after 1s [id=policy_down]
module.iac04_module.aws_autoscaling_policy.web_policy_up: Creation complete after 1s [id=policy_up]

Apply complete! Resources: 13 added, 0 changed, 0 destroyed.

Outputs:

elb_dns = web-elb-1125317096.ap-southeast-2.elb.amazonaws.com