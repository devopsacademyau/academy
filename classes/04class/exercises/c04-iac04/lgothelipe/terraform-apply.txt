$ terraform apply -var-file="main.tfvars"


An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.app_load_balancer.aws_lb.devops_alb will be created
  + resource "aws_lb" "devops_alb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "devops-alb"
      + security_groups            = (known after apply)
      + subnets                    = [
          + "subnet-0a446d9e47b3ea3ac",
          + "subnet-0ffe987e71765b443",
        ]
      + tags                       = {
          + "Environment" = "devops_exercise"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + subnet_mapping {
          + allocation_id = (known after apply)
          + subnet_id     = (known after apply)
        }
    }

  # module.app_load_balancer.aws_lb_listener.devops_alb will be created
  + resource "aws_lb_listener" "devops_alb" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.auto_scalling.data.aws_instance.devops will be read during apply
  # (config refers to values not yet known)
 <= data "aws_instance" "devops"  {
      + ami                         = (known after apply)
      + arn                         = (known after apply)
      + associate_public_ip_address = (known after apply)
      + availability_zone           = (known after apply)
      + credit_specification        = (known after apply)
      + disable_api_termination     = (known after apply)
      + ebs_block_device            = (known after apply)
      + ebs_optimized               = (known after apply)
      + ephemeral_block_device      = (known after apply)
      + host_id                     = (known after apply)
      + iam_instance_profile        = (known after apply)
      + id                          = (known after apply)
      + instance_state              = (known after apply)
      + instance_tags               = (known after apply)
      + instance_type               = (known after apply)
      + key_name                    = (known after apply)
      + metadata_options            = (known after apply)
      + monitoring                  = (known after apply)
      + network_interface_id        = (known after apply)
      + password_data               = (known after apply)
      + placement_group             = (known after apply)
      + private_dns                 = (known after apply)
      + private_ip                  = (known after apply)
      + public_dns                  = (known after apply)
      + public_ip                   = (known after apply)
      + root_block_device           = (known after apply)
      + security_groups             = (known after apply)
      + source_dest_check           = (known after apply)
      + subnet_id                   = (known after apply)
      + tags                        = (known after apply)
      + tenancy                     = (known after apply)
      + user_data                   = (known after apply)
      + user_data_base64            = (known after apply)
      + vpc_security_group_ids      = (known after apply)

      + filter {
          + name   = "image-id"
          + values = [
              + "ami-0970010f37c4f9c8d",
            ]
        }
    }

  # module.auto_scalling.aws_autoscaling_group.devops will be created
  + resource "aws_autoscaling_group" "devops" {
      + arn                       = (known after apply)
      + availability_zones        = [
          + "ap-southeast-2a",
        ]
      + default_cooldown          = (known after apply)
      + desired_capacity          = 1
      + force_delete              = false
      + health_check_grace_period = 300
      + health_check_type         = "ELB"
      + id                        = (known after apply)
      + load_balancers            = (known after apply)
      + max_size                  = 1
      + metrics_granularity       = "1Minute"
      + min_size                  = 1
      + name                      = "devops_c04_iac04"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }
    }

  # module.auto_scalling.aws_autoscaling_policy.decrease will be created
  + resource "aws_autoscaling_policy" "decrease" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "devops_c04_iac04"
      + cooldown                = 300
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "asg-policy-down"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = -1
    }

  # module.auto_scalling.aws_autoscaling_policy.increase will be created
  + resource "aws_autoscaling_policy" "increase" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "devops_c04_iac04"
      + cooldown                = 300
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "asg-policy-up"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = 1
    }

  # module.auto_scalling.aws_lb_target_group.devops_target will be created
  + resource "aws_lb_target_group" "devops_target" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + deregistration_delay               = 300
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "devops-tg"
      + port                               = 80
      + protocol                           = "HTTP"
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = (known after apply)
          + healthy_threshold   = (known after apply)
          + interval            = (known after apply)
          + matcher             = (known after apply)
          + path                = (known after apply)
          + port                = (known after apply)
          + protocol            = (known after apply)
          + timeout             = (known after apply)
          + unhealthy_threshold = (known after apply)
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }
    }

  # module.auto_scalling.aws_lb_target_group_attachment.devops_attach will be created
  + resource "aws_lb_target_group_attachment" "devops_attach" {
      + id               = (known after apply)
      + port             = 80
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # module.default_vpc.aws_default_vpc.default will be created
  + resource "aws_default_vpc" "default" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = (known after apply)
      + cidr_block                       = (known after apply)
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = (known after apply)
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "Default VPC"
        }
    }

  # module.ec2_template.aws_launch_template.launch_temp will be created
  + resource "aws_launch_template" "launch_temp" {
      + arn                                  = (known after apply)
      + default_version                      = (known after apply)
      + id                                   = (known after apply)
      + image_id                             = "ami-0970010f37c4f9c8d"
      + instance_initiated_shutdown_behavior = "terminate"
      + instance_type                        = "t2.micro"
      + latest_version                       = (known after apply)
      + name                                 = "devops_01"
      + user_data                            = "ICAgICMhIC9iaW4vYmFzaA0KICAgIHl1bSB1cGRhdGUgLXkNCiAgICB5dW0gaW5zdGFsbCAteSBodHRwZA0KICAgIGVjaG8gRGV2T3BzIGV4ZXJjaXNlIGMwNC1pYWMwNCEhID4gaW5kZXguaHRtbA0KICAgIG12IGluZGV4Lmh0bWwgL3Zhci93d3cvaHRtbC8NCiAgICBzeXN0ZW1jdGwgc3RhcnQgaHR0cGQNCg=="
      + vpc_security_group_ids               = (known after apply)

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + placement {
          + availability_zone = "ap-southeast-2a"
        }
    }

  # module.security_groups.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Allow HTTP inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP Inbound"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "alb"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "alb"
        }
      + vpc_id                 = (known after apply)
    }

  # module.security_groups.aws_security_group.allow_alb will be created
  + resource "aws_security_group" "allow_alb" {
      + arn                    = (known after apply)
      + description            = "Allow ALB inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "HTTP Inbound"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "allow_alb"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_alb"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 11 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.default_vpc.aws_default_vpc.default: Creating...
module.security_groups.aws_security_group.alb: Creating...
module.security_groups.aws_security_group.alb: Creation complete after 2s [id=sg-08221f58ce108d256]
module.security_groups.aws_security_group.allow_alb: Creating...
module.app_load_balancer.aws_lb.devops_alb: Creating...
module.default_vpc.aws_default_vpc.default: Creation complete after 2s [id=vpc-04e80fd715164a1e2]
module.auto_scalling.aws_lb_target_group.devops_target: Creating...
module.auto_scalling.aws_lb_target_group.devops_target: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-2:232684571994:targetgroup/devops-tg/f22610b5090609ab]
module.security_groups.aws_security_group.allow_alb: Creation complete after 2s [id=sg-0863a1d8945b0d89e]
module.ec2_template.aws_launch_template.launch_temp: Creating...
module.ec2_template.aws_launch_template.launch_temp: Creation complete after 1s [id=lt-033d70ee9582a44b4]
module.auto_scalling.aws_autoscaling_group.devops: Creating...
module.app_load_balancer.aws_lb.devops_alb: Still creating... [10s elapsed]
module.auto_scalling.aws_autoscaling_group.devops: Still creating... [10s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [20s elapsed]
module.auto_scalling.aws_autoscaling_group.devops: Still creating... [20s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [30s elapsed]
module.auto_scalling.aws_autoscaling_group.devops: Still creating... [30s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [40s elapsed]
module.auto_scalling.aws_autoscaling_group.devops: Still creating... [40s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [50s elapsed]
module.auto_scalling.aws_autoscaling_group.devops: Creation complete after 48s [id=devops_c04_iac04]
module.auto_scalling.data.aws_instance.devops: Refreshing state...
module.auto_scalling.aws_autoscaling_policy.decrease: Creating...
module.auto_scalling.aws_autoscaling_policy.increase: Creating...
module.auto_scalling.aws_autoscaling_policy.decrease: Creation complete after 1s [id=asg-policy-down]
module.auto_scalling.aws_autoscaling_policy.increase: Creation complete after 1s [id=asg-policy-up]
module.auto_scalling.aws_lb_target_group_attachment.devops_attach: Creating...
module.auto_scalling.aws_lb_target_group_attachment.devops_attach: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-2:232684571994:targetgroup/devops-tg/f22610b5090609ab-20200413140357545800000002]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [1m0s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [1m10s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [1m20s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [1m30s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [1m40s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [1m50s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [2m0s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [2m10s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Still creating... [2m20s elapsed]
module.app_load_balancer.aws_lb.devops_alb: Creation complete after 2m24s [id=arn:aws:elasticloadbalancing:ap-southeast-2:232684571994:loadbalancer/app/devops-alb/e2ad385ae8d151c5]
module.app_load_balancer.aws_lb_listener.devops_alb: Creating...
module.app_load_balancer.aws_lb_listener.devops_alb: Creation complete after 0s [id=arn:aws:elasticloadbalancing:ap-southeast-2:232684571994:listener/app/devops-alb/e2ad385ae8d151c5/d7772a1a622bdeaa]

Apply complete! Resources: 11 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

alb_fqdn = devops-alb-1411289275.ap-southeast-2.elb.amazonaws.com
