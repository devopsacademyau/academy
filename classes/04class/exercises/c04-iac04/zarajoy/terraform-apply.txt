z@bacon:~/Documents/GitHub/academy/classes/04class/exercises/c04-iac04/zarajoy/terraform-code$ terraform apply -var-file="main.tfvars"
module.network.data.aws_availability_zones.available: Refreshing state...

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.app_load_balancer.aws_autoscaling_attachment.alb_autoscale_attach will be created
  + resource "aws_autoscaling_attachment" "alb_autoscale_attach" {
      + alb_target_group_arn   = (known after apply)
      + autoscaling_group_name = "autoscale-group"
      + id                     = (known after apply)
    }

  # module.app_load_balancer.aws_autoscaling_group.autoscale-group will be created
  + resource "aws_autoscaling_group" "autoscale-group" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = 300
      + desired_capacity          = (known after apply)
      + force_delete              = false
      + health_check_grace_period = 0
      + health_check_type         = "EC2"
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + load_balancers            = (known after apply)
      + max_size                  = 5
      + metrics_granularity       = "1Minute"
      + min_size                  = 2
      + name                      = "autoscale-group"
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + termination_policies      = [
          + "OldestInstance",
        ]
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "iac04-autoscale-group"
        }
    }

  # module.app_load_balancer.aws_autoscaling_policy.asg_policy_decrease will be created
  + resource "aws_autoscaling_policy" "asg_policy_decrease" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "autoscale-group"
      + cooldown                = 60
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "iac04_asg-policy-decrease"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = -1
    }

  # module.app_load_balancer.aws_autoscaling_policy.asg_policy_increase will be created
  + resource "aws_autoscaling_policy" "asg_policy_increase" {
      + adjustment_type         = "ChangeInCapacity"
      + arn                     = (known after apply)
      + autoscaling_group_name  = "autoscale-group"
      + cooldown                = 60
      + id                      = (known after apply)
      + metric_aggregation_type = (known after apply)
      + name                    = "iac04_asg-policy-increase"
      + policy_type             = "SimpleScaling"
      + scaling_adjustment      = 1
    }

  # module.app_load_balancer.aws_cloudwatch_metric_alarm.add will be created
  + resource "aws_cloudwatch_metric_alarm" "add" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_name                            = "iac04_add"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanOrEqualToThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 60
      + statistic                             = "Average"
      + threshold                             = 60
      + treat_missing_data                    = "missing"
    }

  # module.app_load_balancer.aws_cloudwatch_metric_alarm.remove will be created
  + resource "aws_cloudwatch_metric_alarm" "remove" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_name                            = "iac04_Remove"
      + arn                                   = (known after apply)
      + comparison_operator                   = "LessThanOrEqualToThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 60
      + statistic                             = "Average"
      + threshold                             = 40
      + treat_missing_data                    = "missing"
    }

  # module.app_load_balancer.aws_launch_configuration.launch_configuration will be created
  + resource "aws_launch_configuration" "launch_configuration" {
      + arn                         = (known after apply)
      + associate_public_ip_address = true
      + ebs_optimized               = (known after apply)
      + enable_monitoring           = true
      + id                          = (known after apply)
      + image_id                    = "ami-0ded330691a314693"
      + instance_type               = "t2.micro"
      + key_name                    = (known after apply)
      + name                        = (known after apply)
      + security_groups             = (known after apply)
      + user_data_base64            = "IyEgL2Jpbi9iYXNoCnl1bSB1cGRhdGUgLXkKeXVtIGluc3RhbGwgLXkgaHR0cGQKY3VybCAxNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9ob3N0bmFtZSA+PiBpbmRleC5odG1sCm12IGluZGV4Lmh0bWwgL3Zhci93d3cvaHRtbC8Kc3lzdGVtY3RsIHN0YXJ0IGh0dHBkCg=="

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.app_load_balancer.aws_lb.alb will be created
  + resource "aws_lb" "alb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "alb"
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags                       = {
          + "Name" = "iac04_alb"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + subnet_mapping {
          + allocation_id = (known after apply)
          + subnet_id     = (known after apply)
        }
    }

  # module.app_load_balancer.aws_lb_listener.alb_listener will be created
  + resource "aws_lb_listener" "alb_listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.app_load_balancer.aws_lb_target_group.albtargetgroup will be created
  + resource "aws_lb_target_group" "albtargetgroup" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + deregistration_delay               = 300
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "albtargetgroup"
      + port                               = 80
      + protocol                           = "HTTP"
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "name" = "iac04_alb_target_group"
        }
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 200
          + matcher             = (known after apply)
          + path                = (known after apply)
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = (known after apply)
          + unhealthy_threshold = 3
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }
    }

  # module.network.aws_eip.NAT_EIP will be created
  + resource "aws_eip" "NAT_EIP" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # module.network.aws_internet_gateway.IGW will be created
  + resource "aws_internet_gateway" "IGW" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "iac04_IGW"
        }
      + vpc_id   = (known after apply)
    }

  # module.network.aws_nat_gateway.NAT_GW will be created
  + resource "aws_nat_gateway" "NAT_GW" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Name" = "iac04_NAT_GW"
        }
    }

  # module.network.aws_route_table.route_table_PRI will be created
  + resource "aws_route_table" "route_table_PRI" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = ""
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = (known after apply)
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "iac04_route_table_PRI"
        }
      + vpc_id           = (known after apply)
    }

  # module.network.aws_route_table.route_table_PUB will be created
  + resource "aws_route_table" "route_table_PUB" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + tags             = {
          + "Name" = "iac04_route_table_PUB"
        }
      + vpc_id           = (known after apply)
    }

  # module.network.aws_route_table_association.private_1 will be created
  + resource "aws_route_table_association" "private_1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_route_table_association.private_2 will be created
  + resource "aws_route_table_association" "private_2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_route_table_association.public_1 will be created
  + resource "aws_route_table_association" "public_1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_route_table_association.public_2 will be created
  + resource "aws_route_table_association" "public_2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_subnet.subnet_private_1 will be created
  + resource "aws_subnet" "subnet_private_1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "iac04_Public_subnet_02"
          + "Tier" = "private"
        }
      + vpc_id                          = (known after apply)
    }

  # module.network.aws_subnet.subnet_private_2 will be created
  + resource "aws_subnet" "subnet_private_2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.3.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "iac04_Private_subnet_02"
          + "Tier" = "private"
        }
      + vpc_id                          = (known after apply)
    }

  # module.network.aws_subnet.subnet_public_1 will be created
  + resource "aws_subnet" "subnet_public_1" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.0.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "iac04_Public_subnet_01"
          + "Tier" = "public"
        }
      + vpc_id                          = (known after apply)
    }

  # module.network.aws_subnet.subnet_public_2 will be created
  + resource "aws_subnet" "subnet_public_2" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-2c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.2.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "iac04_Private_subnet_01"
          + "Tier" = "public"
        }
      + vpc_id                          = (known after apply)
    }

  # module.network.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "192.168.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "iac04_vpc"
        }
    }

  # module.security.aws_security_group.app_load_balancer_security_group will be created
  + resource "aws_security_group" "app_load_balancer_security_group" {
      + arn                    = (known after apply)
      + description            = "app_load_balancer_group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = "app_load_balancer_security_group"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = (known after apply)
    }

  # module.security.aws_security_group.autoscaling_security_group will be created
  + resource "aws_security_group" "autoscaling_security_group" {
      + arn                    = (known after apply)
      + description            = "autoscaling group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = "autoscaling_security_group"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = (known after apply)
    }

Plan: 26 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.network.aws_eip.NAT_EIP: Creating...
module.network.aws_vpc.vpc: Creating...
module.network.aws_eip.NAT_EIP: Creation complete after 0s [id=eipalloc-0ab05c2b2c0b6e009]
module.network.aws_vpc.vpc: Creation complete after 3s [id=vpc-08089e362b5580dda]
module.network.aws_internet_gateway.IGW: Creating...
module.network.aws_subnet.subnet_private_1: Creating...
module.network.aws_subnet.subnet_private_2: Creating...
module.network.aws_subnet.subnet_public_2: Creating...
module.network.aws_subnet.subnet_public_1: Creating...
module.security.aws_security_group.app_load_balancer_security_group: Creating...
module.security.aws_security_group.autoscaling_security_group: Creating...
module.app_load_balancer.aws_lb_target_group.albtargetgroup: Creating...
module.network.aws_subnet.subnet_private_2: Creation complete after 1s [id=subnet-0a17019a813237cf0]
module.network.aws_internet_gateway.IGW: Creation complete after 1s [id=igw-0b2cebdcfb85086b1]
module.network.aws_route_table.route_table_PUB: Creating...
module.network.aws_subnet.subnet_private_1: Creation complete after 1s [id=subnet-0b70a2ae6f81a2f2e]
module.network.aws_subnet.subnet_public_1: Creation complete after 1s [id=subnet-0ee0e34a0bf6f51e3]
module.network.aws_nat_gateway.NAT_GW: Creating...
module.network.aws_subnet.subnet_public_2: Creation complete after 1s [id=subnet-0c769654860000116]
module.app_load_balancer.aws_lb_target_group.albtargetgroup: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-2:512742231244:targetgroup/albtargetgroup/fc3550ff72029d1e]
module.security.aws_security_group.app_load_balancer_security_group: Creation complete after 2s [id=sg-0c817cac0dcffc5cc]
module.app_load_balancer.aws_launch_configuration.launch_configuration: Creating...
module.app_load_balancer.aws_lb.alb: Creating...
module.network.aws_route_table.route_table_PUB: Creation complete after 1s [id=rtb-0e785465cb8886e18]
module.network.aws_route_table_association.public_2: Creating...
module.network.aws_route_table_association.public_1: Creating...
module.security.aws_security_group.autoscaling_security_group: Creation complete after 2s [id=sg-0afa5669a399af0ca]
module.network.aws_route_table_association.public_1: Creation complete after 0s [id=rtbassoc-0c322a59bf7e19f7b]
module.network.aws_route_table_association.public_2: Creation complete after 0s [id=rtbassoc-0222dcfa2d262f0e6]
module.app_load_balancer.aws_launch_configuration.launch_configuration: Creation complete after 0s [id=terraform-20200804081830735900000001]
module.app_load_balancer.aws_autoscaling_group.autoscale-group: Creating...
module.network.aws_nat_gateway.NAT_GW: Still creating... [10s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [10s elapsed]
module.app_load_balancer.aws_autoscaling_group.autoscale-group: Still creating... [10s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [20s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [20s elapsed]
module.app_load_balancer.aws_autoscaling_group.autoscale-group: Still creating... [20s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [30s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [30s elapsed]
module.app_load_balancer.aws_autoscaling_group.autoscale-group: Still creating... [30s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [40s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [40s elapsed]
module.app_load_balancer.aws_autoscaling_group.autoscale-group: Still creating... [40s elapsed]
module.app_load_balancer.aws_autoscaling_group.autoscale-group: Creation complete after 48s [id=autoscale-group]
module.app_load_balancer.aws_autoscaling_attachment.alb_autoscale_attach: Creating...
module.app_load_balancer.aws_autoscaling_policy.asg_policy_increase: Creating...
module.app_load_balancer.aws_autoscaling_policy.asg_policy_decrease: Creating...
module.network.aws_nat_gateway.NAT_GW: Still creating... [50s elapsed]
module.app_load_balancer.aws_autoscaling_attachment.alb_autoscale_attach: Creation complete after 1s [id=autoscale-group-20200804081919815300000002]
module.app_load_balancer.aws_autoscaling_policy.asg_policy_decrease: Creation complete after 1s [id=iac04_asg-policy-decrease]
module.app_load_balancer.aws_autoscaling_policy.asg_policy_increase: Creation complete after 1s [id=iac04_asg-policy-increase]
module.app_load_balancer.aws_cloudwatch_metric_alarm.remove: Creating...
module.app_load_balancer.aws_cloudwatch_metric_alarm.add: Creating...
module.app_load_balancer.aws_lb.alb: Still creating... [50s elapsed]
module.app_load_balancer.aws_cloudwatch_metric_alarm.add: Creation complete after 1s [id=iac04_add]
module.app_load_balancer.aws_cloudwatch_metric_alarm.remove: Creation complete after 1s [id=iac04_Remove]
module.network.aws_nat_gateway.NAT_GW: Still creating... [1m0s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [1m0s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [1m10s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [1m10s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [1m20s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [1m20s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [1m30s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [1m30s elapsed]
module.network.aws_nat_gateway.NAT_GW: Still creating... [1m40s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [1m40s elapsed]
module.network.aws_nat_gateway.NAT_GW: Creation complete after 1m47s [id=nat-09a7128c6df491995]
module.network.aws_route_table.route_table_PRI: Creating...
module.network.aws_route_table.route_table_PRI: Creation complete after 1s [id=rtb-017b8affeb106633a]
module.network.aws_route_table_association.private_2: Creating...
module.network.aws_route_table_association.private_1: Creating...
module.network.aws_route_table_association.private_1: Creation complete after 0s [id=rtbassoc-0717cbb72bc639366]
module.network.aws_route_table_association.private_2: Creation complete after 0s [id=rtbassoc-008e3ca769b29a51b]
module.app_load_balancer.aws_lb.alb: Still creating... [1m50s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [2m0s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [2m10s elapsed]
module.app_load_balancer.aws_lb.alb: Still creating... [2m20s elapsed]
module.app_load_balancer.aws_lb.alb: Creation complete after 2m24s [id=arn:aws:elasticloadbalancing:ap-southeast-2:512742231244:loadbalancer/app/alb/320a4724619e47f7]
module.app_load_balancer.aws_lb_listener.alb_listener: Creating...
module.app_load_balancer.aws_lb_listener.alb_listener: Creation complete after 0s [id=arn:aws:elasticloadbalancing:ap-southeast-2:512742231244:listener/app/alb/320a4724619e47f7/7f7cf29a4222495c]

Apply complete! Resources: 26 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: ./terraform.tfstate

Outputs:

alb_dns_name = alb-366296242.ap-southeast-2.elb.amazonaws.com

